const streets=document.querySelector(".streets"),tbody=document.querySelector("tbody"),streetName=document.getElementById("street-name"),input=document.querySelector(".input");function getStreets(e){return fetch(`https://api.winnipegtransit.com/v3/streets.json?api-key=CwIZIJs65o3ruL2pbvnE&name=${e}`).then(e=>e.json())}function getStops(e){return fetch(`https://api.winnipegtransit.com/v3/stops.json?api-key=CwIZIJs65o3ruL2pbvnE&street=${e}`).then(e=>e.json())}function getStopSchedule(e){return fetch(`https://api.winnipegtransit.com/v3/stops/${e}/schedule.json?api-key=CwIZIJs65o3ruL2pbvnE&max-results-per-route=2`).then(e=>e.json())}function search(e){"Enter"===e.key&&(e.preventDefault(),""!==input.value&&(streets.innerHTML="",getStreets(input.value).then(e=>{if(0===e.streets.length)streets.insertAdjacentHTML("beforeend","No Streets found");else{for(const t of e.streets)insertHTMLForStreets(t);handleClickOnEachStreet()}}),input.value=""))}function insertHTMLForStreets(e){streets.insertAdjacentHTML("beforeend",`<a href="#" datakey=${e.key}>
      ${e.name}
    </a>`)}function handleClickOnEachStreet(){document.querySelectorAll("a").forEach(e=>{e.addEventListener("click",function(e){e.preventDefault(),tbody.innerHTML="",streetName.innerHTML="",getStopsForEachStreet(e.target.getAttribute("datakey"))})}),tbody.innerHTML=""}function getStopsForEachStreet(e){getStops(e).then(e=>{findNext2BusesForEachRoute(e.stops.map(function(e){return getStopSchedule(e.key)}))})}function findNext2BusesForEachRoute(e){Promise.all(e).then(e=>{for(const t of e)for(const i of t["stop-schedule"]["route-schedules"]){let n=t["stop-schedule"].stop.street.name,r=t["stop-schedule"].stop["cross-street"].name,s=t["stop-schedule"].stop.direction,o=i.route.number;streetName.innerHTML=`Displaying results for ${n}`,i["scheduled-stops"].forEach(e=>{let t=new Date(e.times.arrival.estimated);e=t.toLocaleString("en-US",{hour:"numeric",minute:"numeric",hour12:!0});insertHTMLForEachStops(n,s,r,o,e)})}})}function insertHTMLForEachStops(e,t,n,r,s){tbody.insertAdjacentHTML("beforeend",`<tr>
  <td>${e}</td>
  <td>${n}</td>
  <td>${t}</td>
  <td>${r}</td>
  <td>${s}</td>
  </tr>
  `)}input.addEventListener("keypress",search);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
